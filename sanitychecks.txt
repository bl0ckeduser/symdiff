##################################################################
# Algebraic reduction tests
##################################################################

# $ git revert d27f55
# $ ./sanitycheck.sh
#        $ ./sanitycheck.sh 
#        compiling...
#        CHECK (A * B * C) + (X * Y * B * B)
#        
#        
#        
#        **************************************
#         [DEBUG] probably bad code at line 591 of optimize.c
#        **************************************
#        
#        
#        ------------------
#        SANITY CHECK FAILED

(A * B * C) + (X * Y * B * B)

x^2 * x^3 * x^A * x

x / x * x * x^3 * x^A

(A + W + (B * C * X) / U + (C * D * Z) / E) / C

((B*C*X)/U + (C*D*Z)/E)/C

(A + B + (C * D * Z) / E) / C

 (A * B^n) / (B * C * D)	

------A

A * U/A * BAR/A * A * A * XYZ


A * (B * C * D * E * F) / G 

(A * B * C / U) / (D * E * F / U)

(-1 / 2 * (1 + x)) / sqrt(-2 + x)) / ((-2 + x) * (1 + x) / sqrt(-2 + x)

A^n * (B + C/A)
A^n * (B + C/A + A + A + 1/A)
A^n * (B + C/A + 1/A + A*A)
A^n * (B + C/A + C/A)
A^n * (B + C/A + B/A)
A^n * (B * C/A * B/A)
A^n * (B + C/A + B*A)
A^n * (B + C/A + B*A) * A^n 
A^n * (B + C/A + B*A) / A^n 
A^n * (B + C/A + B*A) / A
A^n * (B + C/A + B*A) * A
A^n * (B + C/A + B*A) + A

A^n * B * (C + D/A)
A^n * B * (C + D/A + A)
A^n * B * (C + D/A + A + A/D)
A^n * B * (C + D/A + A + A/D + 1/A)
A^n * B * (C + D/A + A + A/D + 1/A + A^2)
A^n + B * (C + D/A + A + A/D + 1/A + A^2)
A^n + B + (C + D/A + A + A/D + 1/A + A^2)
A^n * B * (C * D/A * A + A/D * 1/A + A^2)
A^n * B * (C * D/A + A * A/D + 1/A * A^2)
A^n * B * (C * D/A + A * A/D + 1/A * A^2) * (C + D/A) / B + (C*D/A)
A^n * B * (C * D/A + A * A/D + 1/A * A^2) * (C + D/A) + (C*D/A)
A^n * B * (C * D/A + A * A/D * 1/A * A^2 * 1/(B^3)) * (C + D/A) + (C*D/A)

A^n * B * (C + D/A) * B^n * (E + F/B) + bleh
A^n * B * (C + D/A + B^n) * B^n * (E + F/B)
A^n * B * (C + D/A + A^3) * B^n * (E + F/B)
A^n * B * (C + D/A + A^3) * B^n * (E + F/B) * (B/F + A^n * B^n)

# this would fail before the fix of 2014-07-01
(A + W + (B * C * X) / U + (C * D * Z) / E) / C
(A + W + (B * C * X * U) / U + (C * D * Z * E) / E) / C
(A + W + (B * C * X * C) / U + (C * D * Z * C) / E) / C
(A * W + (B * C * X * C) / U + (C * D * Z * C) / E) / D

# this would fail before the fix of 2014-07-01
((B*C*X)/U + (C*D*Z)/E)/C
((B*C*X*C)/U + (C*D*Z)/E)/C
((B*C*X*C)/U + (C*D*Z*C*E)/E)/C
((B*C*X*C)/U + (C*D+Z*C+E)/E)/C
((B*C*X*C)/U + (C*D*Z*C+E)/E)/C
((B*C*X*C)/U + (C*D*Z*C+C)/E)/C
((B*C+X*C)/U + (C*D+Z*C+C)/E)/C

# this would fail before the fix of 2014-07-01
((B*C+X*C)/U + (C*D+Z*C+C-C+C*C)/E)/C
((B*C+X*C)/U + (C*(C^3+1))/E)/C
((B*C+X*C)/U + (C*(U/C+1))/E)/C
((B*C+X*C)/U + (C*(3/C+3*C))/E)/C
((B*C+X*C)/U + (C*(3/C+3*C+C^C))/E)/C
((B*C+X*C)/U + (C*(3/C+3*C*3^C))/E)/C
((B*C+X*C)/U + (C*(3/C+3*C*sin(C)))/E)/C
((B*C+X*C)/U + C + (C*(3/C+3*C*sin(C)))/E)/C
((B*C+X*C)/U + A/C + (C*(3/C+3*C*sin(C)))/E)/C
((B*C+X*C)/U + E/C + (C*(3/C+3*C*sin(C)))/E)/C
((B*C+X*C)/U + 3*C + (C*(3/C+3*C*sin(C)))/E)/C
((B*C+Y*C)/V + 3*C * C^3 + (C*(3/C+3*C*sin(C)))/E)/C
((B*C+Y*C)/V + 3*C * C^3 + (C*(3/C+3*C*sin(C)))/E)/D
((B*C+Y*C)/V + 3*C * C^3 + (C*(3/C+3*C*sin(C)))/E)/E
((B*C+Y*C)/V + 3*C * C^3 + (C*(3/C+3*C*sin(C)))/E)/V

((B*C+X*C+U*E+U+F)/U + (C*D+Z*C+C)/E)/C
((B*C+X*C+C*U)/U + (C*D+Z*C+C)/E)/C
((B*C+X*C+C)/U + (C*D+Z*C+C+E)/E)/C
((B*C+X*C+C)/U + (C*D+Z*C+C+E*C)/E)/C
((B*C+X*C+C)/U + (C*D+Z*C+C+E*U)/E)/C
((B*C+X*C+C)/U + (C*D+Z*C+C+U)/E)/C

donald / (u * x ^ n) * x * foo
donald / (u * x ^ n) * x * x * foo
donald / (u * x ^ n) * x * x * foo
donald / (u * x ^ n) * x * x^x * foo
donald / (u * x ^ n) * x * 1/x * foo
donald / (u * x ^ x) * x * 1/x * foo
donald / (u * x ^ n + u) * x * 1/x * foo
donald / (u * x ^ n * donald) * x * 1/x * foo
donald / (u * x ^ n * x^5 * x^2) * x * 1/x * foo
donald / (u * x ^ n * ((x^1)^5 * (x^1)^2)) * x * 1/x * foo

donald / (u * x ^ n) * x * foo * donald / (u * x ^ n) * x
donald / (u * x ^ n * n^x) * x * foo * foo * x
donald / (u * x ^ n * n^x * x * x) * x * foo * foo * x

(A * B^n) / (B * C * D)
(A * B^n * C^n) / (B * C * D)
(A * B^n * C^n * D^n) / (B * C * D)
(A * B^n * C * B * E) / (B * C * D)
(A * B^n * C * B * E) / (B * C * D * E)
(A * B^n * C * B * E) / (B^n * C * D * E)
(A * B^n * C * B^n * E) / (B^n * C * D^m * E)

A * U/A  * FOO * BAR * XYZ
A * U/A * BAR/A * A * A * XYZ

A * A * U/A  * FOO * BAR * XYZ * A
A * A * U/A  * FOO * BAR * XYZ * A * U/A
A * A * A^3 * U/A  * FOO * BAR * XYZ * A * U/A
A * A * A^3 * 1/A * A^A  * FOO * BAR * XYZ * A * U/A
A * A * A^3 * 1/A * 3^A  * FOO * BAR * XYZ * A * U/A

(A * B^n) / (B * C * D)
(A * B^n * B) / (B * C * D)
(A * B^n * B) / (B * C * D)
(A * B^n) / (C * D)
(A * B^n + B) / (B * C * D + B + B + B)
(A * B^n * B * C * B * D) / (B * C * D * D * D * B)
(A * B^n * C * C * B * D) / (B * C * D * D * D * B)
(A * B^n * C * C * sin(B) * D) / (B * C * D * D * D * B)
(A * B^n * C * C * (1+B) * D) / (B * C * D * D * D * B)
(A * B^n * 1/B) / (B * C * D)	
(A * B^n * 1/B) / (B * C * D * 1/B + B)	
(A * B^n * 1/B + 3*B) / (B * C * D * 1/B + B)	
(A * B^n * B^5 + B^2) / (B * C * D)
(B * D) * (A * B^n * B^5 + B^2) / (B * C * D)

(B * D) * (A * B^n * B^5 + B^2) / (B * C * D)

sin(x) / (sin(x)^2 * cos(x))
sin(x) / (sin(x)^2 * cos(x) * cos(x))
sin(x) / (sin(x)^2  + sin(x) + sin(x))
sin(x) / (sin(x)^2  + sin(x) * sin(x))
sin(x) / (sin(x)^2  * (1 / sin(x)))
sin(x) / (sin(x)^2  * (1 / sin(x))) * sin(x)
sin(x) / (sin(x)^2  * sin(x)^3 * (1 / sin(x))) * sin(x)


(A * 123 * C) / 456
(A * 123 * C * D) / 456
(A * 123 * C * D * 789) / 456

(A * B * C) / (X * Y * B * Z)
(A * B * C) / (X * Y * B * Z * B)
(A * B * C) / (X * Y * B * Z * B * B)
(A * B * C) / (X * A * A * A * B * B)
(A * B * C) / (X * Y * B * Z * B + B)
(A * B * C) / (X * Y + B * Z * B + B)
(A * B * B * C) / (X * Y + B * Z * B + B)
(A * C * B * C) / (X * Y + B * Z * B + B)
(A * C * B * C) / (X * Y + B * Z * B + B)

A * B * A * XYZ * A
A * B * A * XYZ * A * A
A * B * A * XYZ * A * A + A
A * B + A * XYZ * A * A + A
A * B + A / XYZ * A * A + A

(A * B * C ^ 2) / C ^ 6 
(A * B * C ^ 2 * C^6 + C + C^C) / C ^ 6 
(A * B * C ^ 2 * C^6 + C + C^C) / C ^ 3 
(A * B * C ^ 2 * C^6 + C + C^C) / 3 ^ C
(A + C) / C^3

(A * B * C) + (X + Y * B)
(A * B * C) + (X + Y + B)
(A * B * C) + (X * Y + B)
(A * B * C) + (X * (Y + B))
(A * B * C) + (B * (A + B))
(A * B * C) + (B * (bleh / (B^(sin(u)/sin(u^1)))))
(A * B * C) + (X * Y * B * B) + (B * S)
(A * B * C) + (X * Y * B * B) + B
(A * B * C) + (X * Y * B * B) + C
(A * B * C) + (X * Y * B * B) + A
(A * B * C) + (X * Y * B * B) + (B * S) + (S * T * U) + (B * T)
(A * S * B * C) + (X * Y * B * B) + (B * S) + (S * T * U) + (B * T)
(A * S * B * C) + (X * Y * B * B) + (B * S * T) + (T * U)

(A * B) + (C * D) + (E * F)


cos(3x^2 + sin(x)) / log(sin(x)cos(x) + e^x +sqrt(3x^2 + sin(x))) + cos(3x^2 + ln(x)^3)

# A new cancellation - Jan 2016

x ^ 2 * (-6 / x ^ 2 + 12 / x ^ 2)
x ^ 2 * (-6 / x ^ 2 + 12 / x ^ 3 + 12 / x^3)
x ^ 2 * (-6 / x ^ 3 + 12 / x ^ 3 + 12 / x^3)


##################################################################
# Derivative tests
##################################################################

diff(e^(cos(x)sin(x)), x)

diff((1+x)(1+x^2)^2, x)

diff(cos(x)^2 + sin(x)^2, x)

# Fixed 2014-06-01
diff(sqrt(3x^x + log(3x)) / (3x^5 + 2x^3 + sin(x)), x)

# 	$ git checkout f4d9b optimize.c
# 	$ ./sanitycheck.sh 
# 	compiling...
# 	CHECK diff(sqrt(3x^x + log(3x)) / (3x^5 + 2x^3 + sin(x)), x)
# 	FLOATEVAL: error: 296.361173 %
# 	!!! insane error !!!
# 	FLOATEVAL: expected: -0.048744
# 	FLOATEVAL: result: 0.024824
# 	FLOATEVAL: result tree: 
# 	((3 * x ^ 5 + 2 * x ^ 3 + sin(x)) * 1 / (2 * sqrt(3 * x ^ x + log(3 * x))) * (3 * x ^ x * (1 + log(x)) + 1 / x)) / (3 * x ^ 5 + 2 * x ^ 3 + sin(x)) ^ 2
# 	------------------
# 	SANITY CHECK FAILED


diff(log(x), x)
diff(log(x^2), x)
diff(x^3, x)
diff(x^5, x)
diff(3x^2 + 2x + 1, x)
diff(x^cos(x), x)

diff(x^cos(x^2), x)
diff(cos(log(x)), x)

diff(e^x, x)
diff(sqrt(x), x)

# some of the lesser-known trig functions
diff(sec(x), x)
diff(csc(x), x)
diff(cot(x), x)
diff(arcsin(x/8), x)
diff(arccos(x/8), x)
diff(arctan(x/8), x)


diff(cos(x), x)
diff(sin(x), x)
diff(x^x, x)
diff(tan(x), x)


diff(ln(x), x)
diff(ln(ln(x)), x)

diff(x^x^x, x)

diff(5sin(x^3)^2, x)
diff(-x, x)
diff(sin(x * cos(x + log(x))), x)
diff(log((1+x)*(1+x^2)^2*(1+x^3)^3), x)
diff(e^u + e^(cos(u) * sin(u)), u)
diff(z^log(sqrt(z)) * z / cos(z), z)
diff((x^2)^(1/3), x)
diff(sin(x)^2, x)
diff(1/x^2, x)

# JAN 2016 - TODO: e ^ log(-5 + x) = (x-5). ?????
# diff((x-5)^2 / (4*x+9)^3, x)

diff(e^(cos(x) * sin(x)), x)
diff((3*x^2 + 5*x^3) / (3*x^5 + 4*x^6), x)
diff((x^2)^1/3, x)

diff(cos(x * sin(x^x)), x)

diff(tan(x^2)^x, x)

# inconclusive
# diff(cos(x^x)^sin(x + log(x)), x)

# there was a bug where this one would stall,
# at some point in june 2013 when the program was
# in early development

# inconclusive
# diff(sin(x^x)^x / cos(e^x + 3*x^2), x)

# There was an error in optimizer.c
# that is demonstrated by this case. 
# it was fixed by commit 18374d48aaa48... on 2014-04-09
# For fun, to reproduce the error, you can do:
#	$ git checkout b017f0c2bb optimize.c
#	$ ./sanitycheck.sh 
#
# Eventually you will get this output:
#
#	]=> x / (1 + -1 * x) ^ 2
#	FLOATEVAL: expected: 0.250000
#	FLOATEVAL: result: 0.750000
#	FLOATEVAL: error: 66.666683 %
#	!!! insane error !!!

diff(x/(1-x), x)

# This one is pretty naughty. It creates a situation
# with a D (differentiation) tree whose argument is
# a multiplication tree with three children.
# Product rule can't deal directly with such a thing.
# So the code labelled  "help product rule" in optimize.c
# kicks in. My stupidself forgot to commit it to the opensource version
# for a whole year.
diff((5*x^3 + 4*x^2) / (e^x + cos(x) * 3*x^2), x)

# inconclusive
# diff(x^cos(x)^sin(x) * log(x^3), x)

# inconclusive
# diff(log(log(log(x))), x)
diff(sin(log(x + x^x)), x)

# These are from a book
diff(arctan(u), u)
diff(e^sec(3*t), t)
diff(x * arctan(sqrt(x)), x)
diff(e^sec(3*t), t)
diff((2*x+1)^5 * (x^3-x+1)^4, x)
diff(e^sec(3*t), t)

#inconclusive
#diff(log((x+1)/sqrt(x-2)), x)

# big-ass polynomial
diff((2*x+1)^5 * (x^3-x+1)^4, x)

diff(-5cos(1+3x)^4, x)

# triggers quotient rule
diff( (cos(x^2)^2 + 5x^3) / (3x^2 + ln(1/x)), x)


# inconclusive
# diff(cos(x^x)^(x/sqrt(x)), x)

diff(-5^(7-3x), x)

# a few from http://www.the-mathroom.ca/freebs/cald6/cald6.htm

diff((x^3+5)/(2x+1), x)
diff((2x^5-7x^2)^3, x)
diff(-5cos(3x+1)^4, x)
diff(tan(3x)^2 sin(5x), x)

diff(sin(6x+1)^2 / sec(x-3), x)

# slightly adapted
diff(3arcsin((x^2+5)/100), x)
diff(arccos((6x-7)/100), x)

diff(ln(sin(5x)^2), x)

# some from http://www.math.brown.edu/utra/derivrules.html

diff(x^2 + 3x - 2tan(x), x)
diff((x^2+3x-2tan(x))/sqrt(x), x)
diff(3(x^2+2)^2, x)

diff((x sin(x)) / e^cos(x), x)

diff((3*x^4 + 5*e^x) / (cos(x^x) * log(x^2)), x)
diff((3x^4 + 5e^x) / (cos(x^x)log(x^2)), x)

diff((x^3 + x^5) / (e^x + cos(x)), x)

diff(log((1+x)*(1+x^2)^2*(1+x^3)^3), x)


# -rw-r--r-- 1 blockeduser blockeduser 183 May 13 20:52 tests2.txt
diff(-3(x^5+7x^3+2x-17)^15, x)
diff((x-5)^2/(4x+9)^3, x)
diff(sqrt(5x^2+1), x)
diff((x^3 ln(2x)) / (e^x sin(x)), x)
diff((x^3 + 5x^2)^3, x)
diff((x^3 + x^5) / (e^x + cos(x)), x)

##################################################

# from old screenshots

diff((3x^2+cos(3x))/sqrt(x^x+log(5sin(x))), x)
diff(sin(3cos(x^2)^3+log(x)), x)
diff(sin(3cos(x^2)^3+log(x)) / sqrt(cos(x) + sin(x)), x)
diff(cos(3x^2+5x^x+e^x), x)
diff(cos(3x^2+5x^x+e^x) / sqrt(e^x + cos(x^3)), x)

# finally managing to get some big ones into the float check

diff(cos(3x^2 + sin(x^2)^3 + log(x)) / log(sqrt(e^x) + x^x + sin(x^2 + 3x)), x)
diff(cos(3x^2 * sin(x^2)^3 + log(x)) / log(sqrt(e^x) + x^x + sin(x^2 + 3x)), x)
diff(cos(3x^2 * sin(x^2)^3 - log(x)) / log(sqrt(e^x) + x^x + sin(x^2 + 3x)), x)
diff(cos(3x^2 * sin(x^2)^3 - log(x)) / log(sqrt(e^x) * x^x + sin(x^2 + 3x)), x)
diff(cos(3x^2 * sin(x^2)^3 - log(x)) + log(sqrt(e^x) * x^x + sin(x^2 + 3x)), x)
diff(cos(3x^2 * log(x)) + log(sqrt(e^x) * x^x + sin(x^2 + 3x)), x)
diff(cos(3x^2 + log(x)) - log(sqrt(e^x) * x^x + sin(x^2 + 3x)), x)
diff(cos(3x^2) - log(sqrt(e^x) * x^x + sin(x^2 + 3x)), x)

diff(cos(3x^2 + sin(x)) / log(sin(x)cos(x) + e^x +sqrt(3x^2 + sin(x))) + cos(3x^2 + ln(x)^3), x)
diff(cos(3x^2 + sin(x)), x)
diff(cos(cos(3x^2 + sin(x)))^3, x)


diff(6x^(3/2) tan(x), x)

# =================================================================================
# A few from NEEDSWORK (cat NEEDSWORK|grep diff|sed 's/]=> //g')
# =================================================================================

diff((x^3*log(2*x)) / (e^x*sin(x)), x)
diff((2*x+7)^3 * (4*x - 3)^5, x)
diff(sin(6*x+1)^2 / sec(x-3), x)
diff((x^3+5)/(2*x+1), x)


# old testing cases
diff(cos(x^x+log(x))/e^(2x), x)
diff(x^x / (e^x+cos(x)), x)
diff((x^3+x^5)/(e^x+cos(x)), x)
diff(cos(x^3 / log(x^2)), x)
diff(x^sin((3x+5)/x^2), x)


# some new tests may 2015
diff((x / cos(3sin(x^2) - sqrt(x))) * (1 + log(2x)), x)
diff(3log(x^2)(1-sin(x)), x)
diff(arctan(x * cos(x) * log(x^2 + sqrt(x))), x)


diff(3log(x^2)(1-sin(x)), x)

diff(cos(3x^2 + sin(x)) / sqrt(3log(x) + arctan(x)), x)

# This one was sent in October 2014 by a customer who is a student
# in the United States.
diff(12t+10e^(2/10)^t, t)

