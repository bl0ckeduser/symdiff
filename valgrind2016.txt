$ valgrind ./matcher
==32037== Memcheck, a memory error detector
==32037== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
==32037== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
==32037== Command: ./matcher
==32037== 
==32037== Conditional jump or move depends on uninitialised value(s)
==32037==    at 0x4019A91: index (strchr.S:40)
==32037==    by 0x4007DED: expand_dynamic_string_token (dl-load.c:425)
==32037==    by 0x4007FA4: fillin_rpath (dl-load.c:495)
==32037==    by 0x4008A3D: _dl_init_paths (dl-load.c:872)
==32037==    by 0x4002F72: dl_main (rtld.c:1347)
==32037==    by 0x4017564: _dl_sysdep_start (dl-sysdep.c:249)
==32037==    by 0x4004CF7: _dl_start (rtld.c:332)
==32037==    by 0x40012D7: ??? (in /lib/x86_64-linux-gnu/ld-2.19.so)
==32037== 
==32037== Use of uninitialised value of size 8
==32037==    at 0x4019A9F: index (strchr.S:47)
==32037==    by 0x4007DED: expand_dynamic_string_token (dl-load.c:425)
==32037==    by 0x4007FA4: fillin_rpath (dl-load.c:495)
==32037==    by 0x4008A3D: _dl_init_paths (dl-load.c:872)
==32037==    by 0x4002F72: dl_main (rtld.c:1347)
==32037==    by 0x4017564: _dl_sysdep_start (dl-sysdep.c:249)
==32037==    by 0x4004CF7: _dl_start (rtld.c:332)
==32037==    by 0x40012D7: ??? (in /lib/x86_64-linux-gnu/ld-2.19.so)
==32037== 
==32037== Conditional jump or move depends on uninitialised value(s)
==32037==    at 0x4019B04: index (strchr.S:77)
==32037==    by 0x4007DED: expand_dynamic_string_token (dl-load.c:425)
==32037==    by 0x4008D71: _dl_map_object (dl-load.c:2538)
==32037==    by 0x40014BD: map_doit (rtld.c:627)
==32037==    by 0x400FFF3: _dl_catch_error (dl-error.c:187)
==32037==    by 0x4000B2E: do_preload (rtld.c:816)
==32037==    by 0x400446C: dl_main (rtld.c:1633)
==32037==    by 0x4017564: _dl_sysdep_start (dl-sysdep.c:249)
==32037==    by 0x4004CF7: _dl_start (rtld.c:332)
==32037==    by 0x40012D7: ??? (in /lib/x86_64-linux-gnu/ld-2.19.so)
==32037== 
==32037== Use of uninitialised value of size 8
==32037==    at 0x4019BBD: index (strchr.S:135)
==32037==    by 0x4007DED: expand_dynamic_string_token (dl-load.c:425)
==32037==    by 0x4008D71: _dl_map_object (dl-load.c:2538)
==32037==    by 0x40014BD: map_doit (rtld.c:627)
==32037==    by 0x400FFF3: _dl_catch_error (dl-error.c:187)
==32037==    by 0x4000B2E: do_preload (rtld.c:816)
==32037==    by 0x400446C: dl_main (rtld.c:1633)
==32037==    by 0x4017564: _dl_sysdep_start (dl-sysdep.c:249)
==32037==    by 0x4004CF7: _dl_start (rtld.c:332)
==32037==    by 0x40012D7: ??? (in /lib/x86_64-linux-gnu/ld-2.19.so)
==32037== 
Reading rules from 'rules'...Done.
Reading rules from 'pres-rules'...Done.

-------------------------------------------------------
Welcome to SYMDIFF, a program trained to compute 
symbolic derivatives. You may enter requests such as: 

	 diff(3cos(x^2)^3 + x^x, x)

and quickly obtain the symbolic result.
(This code was speed-tuned on an ancient 400 MHz machine.)

You will be given a prompt. As always, you can use
CTRL-C to exit.

-------------------------------------------------------

]=> diff(x^cos(x^2), x)
-2 * x ^ cos(x ^ 2) * log(x) * sin(x ^ 2) * x + cos(x ^ 2) * x ^ (cos(x ^ 2) - 1)
]=> diff(5sin(x^3)^2, x)
30 * sin(x ^ 3) * cos(x ^ 3) * x ^ 2
]=> diff(cos(x^x)^sin(x + log(x)), x)
cos(x ^ x) ^ sin(x + log(x)) * (log(cos(x ^ x)) * cos(x + log(x)) * (1 + 1 / x) + sin(x + log(x)) * 1 / cos(x ^ x) * -sin(x ^ x) * x ^ x * (1 + log(x)))
]=> 
]=> diff((3*x^2 + 5*x^3) / (3*x^5 + 4*x^6), x)
((3 * x ^ 5 + 4 * x ^ 6) * (6 * x + 15 * x ^ 2) + -1 * (3 * x ^ 2 + 5 * x ^ 3) * (15 * x ^ 4 + 24 * x ^ 5)) / (3 * x ^ 5 + 4 * x ^ 6) ^ 2
]=> 
]=> 
]=> diff(sin(3cos(x^2)^3+log(x)) / sqrt(cos(x) + sin(x)), x)
(sqrt(cos(x) + sin(x)) * cos(3 * cos(x ^ 2) ^ 3 + log(x)) * (-18 * cos(x ^ 2) ^ 2 * sin(x ^ 2) * x + 1 / x) + -1 * sin(3 * cos(x ^ 2) ^ 3 + log(x)) * 1 / (2 * sqrt(cos(x) + sin(x))) * (-sin(x) + cos(x))) / (cos(x) + sin(x))
]=> diff(cos(3x^2 * sin(x^2)^3 - log(x)) / log(sqrt(e^x) * x^x + sin(x^2 + 3x)), x)
(log(sqrt(e ^ x) * x ^ x + sin(x ^ 2 + 3 * x)) * -sin(3 * x ^ 2 * sin(x ^ 2) ^ 3 + -1 * log(x)) * (18 * x ^ 3 * sin(x ^ 2) ^ 2 * cos(x ^ 2) * 1 + 6 * sin(x ^ 2) ^ 3 * x + -1 / x) + -1 * cos(3 * x ^ 2 * sin(x ^ 2) ^ 3 + -1 * log(x)) * 1 / (sqrt(e ^ x) * x ^ x + sin(x ^ 2 + 3 * x)) * (x ^ x * (sqrt(e ^ x) * (1 + log(x)) + e ^ x / (2 * sqrt(e ^ x))) + cos(x ^ 2 + 3 * x) * (3 + 2 * x))) / log(sqrt(e ^ x) * x ^ x + sin(x ^ 2 + 3 * x)) ^ 2
]=> diff(12t+10e^(2/10)^t, t)
12 + 10 * e ^ ((2 / 10) ^ t) * (2 / 10) ^ t * log(2 / 10)
]=> 
]=> 
==32037== 
==32037== HEAP SUMMARY:
==32037==     in use at exit: 0 bytes in 0 blocks
==32037==   total heap usage: 405,621 allocs, 405,621 frees, 4,832,941,893 bytes allocated
==32037== 
==32037== All heap blocks were freed -- no leaks are possible
==32037== 
==32037== For counts of detected and suppressed errors, rerun with: -v
==32037== Use --track-origins=yes to see where uninitialised values come from
==32037== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)


