=====================
may 2015

presentation issue
diff(3x^2 * 2^(3x), x)

it doesnt clean up the e^( .. * ln(2) * ...) i bnthe final output.




========================

May 2015.
there's a new bug in the GUI edition!

x * arctan(x) - 1/2log(x^2 + 1)

hangs.

might uncover a family of bugs by cracking this one though

*** FIXED in 77dda1b3f7e837c0946f64d0bfcf708f9e4559e7

----------------------------------------------------------------------

Tue, May 13, 2014 at 4:34 AM 

"I have just installed your app which is really good, but it didn't 
solve the equations till the end. Example : cos(x)^2 + sin(x)^2 which 
is simply equals to 1, but as your app try to solve it too which I 
think is good should conclude with zero as it is not. I think you also 
have to focus on arithmetic part of it."

---

I will probably just have to change the code so that negative signs
get moved to numbers. Differentiating "cos(x)^2+sin(x)^2" gives
"cos(x) * (2 * -sin(x) + 2 * sin(x))" as final result, but  "cos(x)
(2sin(x) +-2*sin(x))"  (with the sign moved) successfully simplifies
to 0.

DONE 2014-06-07

=====================================================================

Thu, May 22, 2014 at 11:48 AM

"lnx" (for "ln(x)") syntax expected, assumed and desired

support for e.g. sin^2(x) would also be nice

the grammar/parser would have to be reworked, perhaps something 
like this:

expr := ... 
	| known_function [ '^' expr ] mul_expr

known_function := 'sin'
		  | 'cos'
		  | ...

The lexical analyser would also need to be adapted, so
it could deal with crazy typing like "lnx"

a separate pass using a trie to split function names out

then the tokenizer would use an identifiers table like in wannabe cc

then the parser would know about this crazy syntax and build the
AST's correctly

	lnx

	|		shorthands.c
	V

	ln x

	|		tokenizer.c
	V

	TOK_KNOWNFUNC:	ln
	TOK_IDENT:	x

	|		parser.c
	V

	(FUNC:ln
		(VARIABLE:x))
	

lnx -> ln(x)
ln^2(x) -> ln(x)^2

goddamn it why don't people properly format their fucking inputs already
all this bullshit

=====================================================================

bug in CLI version:	[FIXED; added to sanitychecks.txt]

diff((5*x^3 + 4*x^2) / (e^x + cos(x) * 3*x^2), x)

====================================================================

Fall 2015.

A customer in the United States complains that it can't do implict
differentiations. Which can be thought largely as an instance of
equation solving. Peter Norvig's PAIP shows a data-driven approach
where a small set of metalinguistic equations can be used to accomplish
general-purpose solving of simple algebraic equations. This can be 
investigated in the future I presume.

Another nice thing to have which MAPLE has is to be able to backsubstitue
the last expression into a new one. So we could have something like this:

	]=> diff(x^x, x)

		x ^ x * (1 + log(x))

	]=> diff(??, x)

		x ^ (x - 1) + x ^ x * (1 + log(x)) ^ 2

The appropriate symbol could be, say, ?? or %% or something of that
electric proprotion kernel. I had a colleague he was a cook, (C) 2015

This way we can have easy N'th order differentiation.
Another nice operator would be something like this

	]=> ndiff(x^x, x, 2)

		x ^ (x - 1) + x ^ x * (1 + log(x)) ^ 2

To go with the foregoing of course.

That's business with .NET.

====================================================================

couldn't i use prufer codes to do some massive crazy exhuastive
testing ?

